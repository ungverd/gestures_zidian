import matplotlib.pyplot as plt
import numpy as np
from quaternion import quaternion
import os
from math import sqrt

a_x_theo = [-1.1379786002407855e-15, -1.7932032699950655, -3.5997449437214417, -5.431670041492227, -7.298867477066153, -9.20828772531657, -11.163226871152023, -13.162704401754844, -15.20096088001814, -17.267099465635546, -19.344892043856262, -21.412766405278745, -23.44398546241367, -25.407022940733178, -27.266132512186886, -28.982099263117163, -30.513154180646133, -31.81602462261999, -32.847087226969265, -33.56358515413873, -33.924869573992304, -33.893626287250044, -33.437052287256435, -32.52795336944515, -31.145741457971457, -29.27731752094948, -26.917830912240678, -24.071306986255678, -20.75113083862031, -16.980366195093833, -12.79187654685246, -8.228203953020067, -3.3411539728720374, 1.808962417725646, 7.154463851458473, 12.621815416380107, 18.133491708587265, 23.61010435675059, 28.972668898094255, 34.14485431726562, 39.05504642186671, 43.638067681322596, 47.83643076333467, 51.6010557690438, 54.89144371782931, 57.67536133103578, 59.92814539178417, 61.63177196657087, 62.77385276649709, 63.34671730572271, 63.34671730572271, 62.77385276649709, 61.63177196657087, 59.92814539178416, 57.67536133103577, 54.8914437178293, 51.60105576904379, 47.83643076333467, 43.63806768132258, 39.05504642186667, 34.14485431726559, 28.97266889809421, 23.610104356750554, 18.133491708587208, 12.621815416380056, 7.154463851458444, 1.8089624177255987, -3.3411539728720636, -8.22820395302011, -12.791876546852489, -16.980366195093875, -20.75113083862034, -24.071306986255692, -26.9178309122407, -29.2773175209495, -31.145741457971482, -32.52795336944518, -33.437052287256435, -33.89362628725005, -33.9248695739923, -33.563585154138735, -32.84708722696924, -31.81602462261999, -30.513154180646133, -28.982099263117185, -27.26613251218688, -25.407022940733178, -23.443985462413643, -21.41276640527873, -19.344892043856248, -17.267099465635553, -15.20096088001814, -13.162704401754812, -11.163226871152023, -9.208287725316552, -7.298867477066139, -5.4316700414922305, -3.5997449437214364, -1.793203269995054, -8.049496865344195e-15, ]
a_z_theo = [-9.799999999999999, -10.07108129448281, -10.34570428738845, -10.630375522702414, -10.934843231159983, -11.27216629302491, -11.658821703297207, -12.114808167253038, -12.663692080917478, -13.332533053163555, -14.151620505027248, -15.153952086139832, -16.374390016875267, -17.848444127121812, -19.610651016010916, -21.69254744947614, -24.1202720575521, -26.91187084549127, -30.07442625090105, -33.60117279818746, -37.46880042976113, -41.63517454149368, -46.03771488914223, -50.59266976010705, -55.19549427304467, -59.72249140400474, -64.03380275522728, -67.97774725747145, -71.3964065857984, -74.13225478006622, -76.03553616281377, -76.97201961904697, -76.83070636862745, -75.53104723235673, -73.02923506459662, -69.32317588747125, -64.4558030305212, -58.51647581959889, -51.64029211946521, -44.005238055332285, -35.82719629935822, -27.35293560758336, -18.85130810368914, -10.602984939728621, -2.8891606605110525, 4.020255696771357, 9.878378561409674, 14.472393881132593, 17.63330318102943, 19.24379877179794, 19.243798771797938, 17.633303181029415, 14.472393881132565, 9.878378561409653, 4.020255696771329, -2.8891606605110844, -10.602984939728678, -18.851308103689156, -27.352935607583376, -35.827196299358306, -44.00523805533231, -51.64029211946527, -58.516475819598924, -64.45580303052125, -69.3231758874713, -73.02923506459662, -75.53104723235676, -76.83070636862745, -76.97201961904699, -76.03553616281376, -74.13225478006619, -71.39640658579837, -67.97774725747142, -64.03380275522726, -59.722491404004714, -55.195494273044616, -50.59266976010699, -46.03771488914225, -41.63517454149365, -37.46880042976114, -33.60117279818742, -30.074426250901055, -26.911870845491215, -24.1202720575521, -21.692547449476148, -19.610651016010884, -17.848444127121816, -16.374390016875267, -15.15395208613981, -14.151620505027235, -13.33253305316355, -12.663692080917471, -12.114808167253033, -11.658821703297207, -11.27216629302491, -10.93484323115998, -10.630375522702415, -10.34570428738846, -10.071081294482806, -9.8, ]
a_global_x_t = [0.0, 1.7926861186441, 3.595490818159097, 5.416891401981437, 7.262733938865055, 9.135243689227412, 11.031941032804681, 12.944432369770109, 14.85704288697005, 16.745263069396447, 18.573999312677216, 20.295657288807657, 21.848150599784873, 23.15302040218258, 24.11397360350429, 24.616290656629815, 24.527702079605696, 23.701456775917404, 21.982363167671892, 19.21652301118149, 15.265239661854825, 10.023117324480568, 3.439652100900469, -4.457323284032864, -13.53904003262315, -23.5577316707479, -34.13745978248753, -44.778186528713235, -54.87654105871247, -63.76475488238172, -70.76631416954514, -75.26340639411112, -76.76792575382085, -74.9855100454146, -69.86161154064604, -61.600424256420425, -50.651517423663904, -37.66455451800331, -23.41831144372937, -8.73497278233922, 5.606764733596072, 18.946488090308087, 30.79432450664002, 40.85486996714287, 49.02225337588843, 55.35046916509911, 60.006348224374086, 63.21400122935451, 65.19941151150157, 66.14255479811361, 66.14255479811361, 65.19941151150157, 63.2140012293545, 60.00634822437407, 55.35046916509909, 49.022253375888404, 40.85486996714277, 30.79432450664001, 18.946488090308073, 5.606764733595963, -8.73497278233927, -23.41831144372949, -37.6645545180034, -50.65151742366404, -61.60042425642051, -69.86161154064605, -74.98551004541464, -76.76792575382085, -75.2634063941111, -70.76631416954505, -63.764754882381645, -54.87654105871238, -44.778186528713164, -34.137459782487426, -23.55773167074784, -13.539040032623051, -4.457323284032795, 3.439652100900447, 10.023117324480621, 15.265239661854812, 19.216523011181547, 21.982363167671878, 23.701456775917425, 24.527702079605696, 24.616290656629825, 24.113973603504288, 23.153020402182587, 21.848150599784862, 20.29565728880764, 18.573999312677195, 16.745263069396447, 14.857042886970032, 12.944432369770087, 11.031941032804681, 9.1352436892274, 7.262733938865035, 5.416891401981443, 3.59549081815909, 1.7926861186440837, 6.911518265103413e-15, ]
a_global_z_t = [0.0, 0.27117336200819037, 0.5471835123607194, 0.8379138336637445, 1.1588757941258352, 1.5314437962800476, 1.9831249986922064, 2.5477542379885865, 3.2654730282093865, 4.182321921145912, 5.349249507464982, 6.820322625368142, 8.649916480995996, 10.888678515701484, 13.578107119555334, 16.7436796027467, 20.386618440565993, 24.474613956846902, 28.932130888728505, 33.63130558909677, 38.38485487498943, 42.94279838139147, 46.99503896732038, 50.181816019537685, 52.11360265731221, 52.40104966359458, 50.69406050113004, 46.72712581961862, 40.36594009761629, 31.64852313033496, 20.813128621781093, 8.305656643224058, -5.238604771723813, -19.04038550463516, -32.24572921661947, -44.011119112935454, -53.59266889029514, -60.426043722996106, -64.1849060161622, -64.80938377354859, -62.501506951025746, -57.690443998318784, -50.97530210666678, -43.05615501046281, -34.66436238273692, -26.50135694296641, -19.19165298957002, -13.251890636332844, -9.074251574002384, -6.920272693614553, -6.920272693614556, -9.074251574002398, -13.25189063633287, -19.191652989570038, -26.50135694296646, -34.664362382736954, -43.0561550104629, -50.975302106666796, -57.69044399831879, -62.50150695102579, -64.8093837735486, -64.18490601616217, -60.42604372299604, -53.59266889029504, -44.01111911293536, -32.24572921661941, -19.040385504635005, -5.238604771723753, 8.305656643224204, 20.813128621781107, 31.648523130335064, 40.36594009761636, 46.72712581961865, 50.69406050113009, 52.401049663594584, 52.1136026573122, 50.18181601953765, 46.99503896732041, 42.94279838139142, 38.38485487498943, 33.6313055890967, 28.932130888728516, 24.474613956846838, 20.386618440565986, 16.74367960274671, 13.578107119555295, 10.888678515701484, 8.64991648099598, 6.820322625368121, 5.349249507464972, 4.1823219211459115, 3.2654730282093865, 2.5477542379885807, 1.9831249986922042, 1.5314437962800402, 1.1588757941258387, 0.8379138336637464, 0.5471835123607185, 0.27117336200818903, 1.0445738201102936e-15, ]
pos_x_t = [0.08966287948415953, 0.08969334334173162, 0.0899068024485304, 0.09048727016705937, 0.09162063486244106, 0.09349524797599594, 0.0963021418652072, 0.10023476654111994, 0.10548812165365512, 0.11225714398062638, 0.12073419182694296, 0.13110544807591737, 0.1435460471118316, 0.158213724002078, 0.17524079668914944, 0.1947243358763017, 0.21671446728757796, 0.24120090190927657, 0.2680980139657254, 0.29722908920492386, 0.3283107408333504, 0.36093891241557813, 0.3945783085664983, 0.42855744250791944, 0.46207166959237655, 0.49419648108827297, 0.523912863800761, 0.5501456241167685, 0.5718142311808091, 0.5878940474316042, 0.5974839860065767, 0.5998749586995936, 0.5946123033237989, 0.581545036068872, 0.5608554896542157, 0.5330647156536825, 0.499011764290477, 0.4598082024087857, 0.41677243635972266, 0.37135098778307685, 0.3250353504160849, 0.2792831798395965, 0.23545135807578593, 0.19474621531760042, 0.15819334593391066, 0.1266265509206446, 0.10069294326518669, 0.08086949364775707, 0.06748542227842177, 0.06074484661898809, 0.06074484661898809, 0.06748542227842177, 0.08086949364775707, 0.10069294326518669, 0.12662655092064484, 0.15819334593391066, 0.19474621531760114, 0.23545135807578593, 0.2792831798395965, 0.32503535041608506, 0.37135098778307685, 0.416772436359723, 0.4598082024087863, 0.4990117642904775, 0.5330647156536827, 0.5608554896542158, 0.5815450360688722, 0.5946123033237989, 0.5998749586995936, 0.5974839860065767, 0.587894047431604, 0.571814231180809, 0.5501456241167684, 0.5239128638007605, 0.4941964810882727, 0.4620716695923763, 0.4285574425079194, 0.3945783085664984, 0.36093891241557796, 0.3283107408333504, 0.29722908920492336, 0.2680980139657254, 0.24120090190927646, 0.21671446728757796, 0.1947243358763017, 0.17524079668914927, 0.15821372400207784, 0.1435460471118313, 0.13110544807591729, 0.12073419182694316, 0.1122571439806264, 0.10548812165365543, 0.10023476654112005, 0.09630214186520704, 0.09349524797599557, 0.09162063486244168, 0.09048727016705951, 0.0899068024485304, 0.08969334334173203, 0.08966287948415953, ]
pos_z_t = [-0.5932626467616253, -0.5932580417998413, -0.5932257301175337, -0.5931374663075277, -0.5929634552545403, -0.5926707674636121, -0.5922211558802788, -0.5915682476066875, -0.5906540918253116, -0.5894050675259866, -0.5877271943035263, -0.5855009491749888, -0.5825757739200693, -0.5787645614041985, -0.5738385340631563, -0.5675230682690644, -0.559495165008833, -0.5493834042980835, -0.5367713245951516, -0.521205207696941, -0.5022071857843698, -0.47929437875303693, -0.4520043787495882, -0.41992680132503013, -0.38273982306537374, -0.34024967021287217, -0.2924300106762049, -0.23945728693270388, -0.1817374067689427, -0.11991909353596163, -0.05488976649333488, 0.012248833624506314, 0.0802259854159894, 0.1476664180633306, 0.2131692279029266, 0.2753942790347297, 0.33314750351714384, 0.385456115527567, 0.4316256900264173, 0.471273215738528, 0.5043332439765327, 0.5310375744320581, 0.5518719579578836, 0.5675155606848774, 0.5787701316604322, 0.5864859048621215, 0.5914904320245543, 0.5945251256230937, 0.5961926851110327, 0.5969171329499896, 0.5969171329499896, 0.5961926851110327, 0.5945251256230937, 0.5914904320245543, 0.5864859048621214, 0.5787701316604322, 0.5675155606848772, 0.5518719579578836, 0.5310375744320581, 0.5043332439765326, 0.471273215738528, 0.431625690026417, 0.38545611552756637, 0.3331475035171432, 0.27539427903472924, 0.2131692279029264, 0.14766641806332984, 0.08022598541598913, 0.012248833624505514, -0.05488976649333488, -0.11991909353596228, -0.1817374067689432, -0.2394572869327041, -0.29243001067620555, -0.34024967021287256, -0.38273982306537396, -0.41992680132503013, -0.4520043787495882, -0.47929437875303704, -0.5022071857843698, -0.5212052076969412, -0.5367713245951516, -0.5493834042980836, -0.559495165008833, -0.5675230682690644, -0.5738385340631563, -0.5787645614041985, -0.5825757739200694, -0.585500949174989, -0.5877271943035263, -0.5894050675259866, -0.5906540918253115, -0.5915682476066875, -0.5922211558802788, -0.5926707674636121, -0.5929634552545402, -0.5931374663075277, -0.5932257301175337, -0.5932580417998412, -0.5932626467616253, ]
v_x_t = [0.0, 0.009049545421518144, 0.036250141854145795, 0.0817486303688063, 0.14576499265254425, 0.2285608431027596, 0.3303974715458464, 0.4514823318154398, 0.591902545919165, 0.7515436755457658, 0.9299918079220814, 1.1264170797322404, 1.3394373513156175, 1.5669621232432083, 1.8060192562839323, 2.052570874513617, 2.3013301413271976, 2.545597311863983, 2.777141138247089, 2.9861594088558565, 3.161358644253644, 3.290195695975605, 3.3593207557667224, 3.355249636497167, 3.2652713184364908, 3.0785643146508184, 2.7874543803871834, 2.3887014335503562, 1.884663262309162, 1.2841578440830648, 0.6028453038773037, -0.13701746596541817, -0.9075295613478132, -1.6767902450856615, -2.411108083583133, -3.0775446927044, -3.646488727241744, -4.093930836427338, -4.403143930652721, -4.565561383628232, -4.580771785990126, -4.455686724275718, -4.203059860623195, -3.839618582275913, -3.3841014123629645, -2.855475290250069, -2.271547303327259, -1.6481021187792315, -0.9986067269140084, -0.3344423072559692, 0.3344423072559721, 0.9986067269140118, 1.648102118779236, 2.271547303327262, 2.8554752902500713, 3.384101412362968, 3.839618582275915, 4.2030598606231955, 4.4556867242757185, 4.580771785990128, 4.565561383628234, 4.403143930652721, 4.093930836427332, 3.6464887272417377, 3.0775446927043957, 2.4111080835831302, 1.6767902450856527, 0.9075295613478102, 0.13701746596540923, -0.6028453038773035, -1.2841578440830714, -1.8846632623091664, -2.3887014335503576, -2.7874543803871896, -3.0785643146508215, -3.265271318436491, -3.3552496364971645, -3.3593207557667233, -3.290195695975603, -3.1613586442536445, -2.9861594088558534, -2.777141138247091, -2.5455973118639776, -2.301330141327197, -2.0525708745136186, -1.806019256283928, -1.5669621232432092, -1.3394373513156177, -1.1264170797322368, -0.9299918079220776, -0.7515436755457651, -0.5919025459191627, -0.4514823318154371, -0.3303974715458471, -0.2285608431027603, -0.14576499265254222, -0.08174863036880638, -0.03625014185414588, -0.009049545421517645, 0.0, ]
v_z_t = [0.0, 0.0013681803319788382, 0.005493919391807514, 0.012471325488877433, 0.022522604132175814, 0.036056026172755704, 0.05372652405404117, 0.07649874094839683, 0.10571108984968408, 0.1431378032557389, 0.1910440939664316, 0.252227457814974, 0.3300359296466017, 0.4283519230808119, 0.5515284082896897, 0.7042630030841526, 0.8913956130839781, 1.1176172463816898, 1.3870823375822408, 1.7029251208691432, 2.066692846924877, 2.477724982357362, 2.9325271259752625, 3.424209168492394, 3.942075736196235, 4.471468407750445, 4.993958054324474, 5.487966801187801, 5.929859424824778, 6.295484148841068, 6.562068635320109, 6.710299874812855, 6.726352316015426, 6.603593805194517, 6.343707382770373, 5.957024569566623, 5.461967308881843, 4.883624627688452, 4.251621407215924, 3.5975431511373483, 2.9522399731093203, 2.343333912022469, 1.7931988353230983, 1.3175871094335792, 0.9249653638233332, 0.6165177785960556, 0.386699042544486, 0.2241809102446029, 0.11303626887557962, 0.03403428304489025, -0.034034283044890555, -0.11303626887557999, -0.22418091024460354, -0.3866990425444865, -0.6165177785960574, -0.9249653638233339, -1.3175871094335854, -1.7931988353230988, -2.34333391202247, -2.9522399731093243, -3.5975431511373492, -4.2516214072159295, -4.883624627688458, -5.4619673088818494, -5.957024569566626, -6.343707382770374, -6.603593805194519, -6.726352316015426, -6.710299874812855, -6.562068635320106, -6.295484148841066, -5.929859424824773, -5.487966801187798, -4.993958054324469, -4.471468407750441, -3.94207573619623, -3.424209168492391, -2.9325271259752643, -2.4777249823573584, -2.0666928469248775, -1.7029251208691374, -1.3870823375822416, -1.117617246381687, -0.8913956130839777, -0.7042630030841531, -0.5515284082896877, -0.4283519230808117, -0.330035929646601, -0.252227457814973, -0.19104409396643116, -0.1431378032557388, -0.10571108984968397, -0.07649874094839644, -0.05372652405404119, -0.03605602617275567, -0.02252260413217566, -0.012471325488877465, -0.005493919391807527, -0.0013681803319787688, 0.0, ]
theta_t = [0.0, 5.134989698722053e-05, 0.00041116788952627674, 0.0013897344431030513, 0.0033008101868913856, 0.006463019096730822, 0.01120081599355609, 0.01784492042203361, 0.026732115935863908, 0.038204334142732464, 0.05260696600280641, 0.07028636820172213, 0.09158655924227234, 0.11684512748472103, 0.14638840095527095, 0.18052595557186568, 0.21954456375704962, 0.26370170850401, 0.3132188081719109, 0.3682743140181912, 0.428996855222363, 0.4954586145111558, 0.5676691211619755, 0.6455696469626077, 0.7290283845856849, 0.8178365768683532, 0.9117057498675014, 1.0102661826060682, 1.1130667225669872, 1.219576028762072, 1.3291852942278255, 1.4412124677781226, 1.5549079615326393, 1.669461796936812, 1.7840121085110334, 1.89765489223039, 2.0094548550373847, 2.1184571942844186, 2.2237001115862043, 2.3242278452541125, 2.419103989711215, 2.5074248594693684, 2.5883326496920724, 2.661028145248466, 2.7247827355347116, 2.778949503117887, 2.8229731702334804, 2.856398708005069, 2.8788784385009105, 2.8901774888380345, 2.8901774888380345, 2.8788784385009105, 2.856398708005069, 2.8229731702334804, 2.7789495031178864, 2.7247827355347116, 2.6610281452484648, 2.5883326496920724, 2.5074248594693684, 2.4191039897112145, 2.3242278452541125, 2.2237001115862034, 2.1184571942844173, 2.0094548550373834, 1.8976548922303893, 1.784012108511033, 1.6694617969368106, 1.5549079615326389, 1.4412124677781213, 1.3291852942278255, 1.219576028762071, 1.1130667225669864, 1.0102661826060677, 0.9117057498675, 0.8178365768683524, 0.7290283845856843, 0.6455696469626075, 0.5676691211619757, 0.4954586145111554, 0.42899685522236297, 0.3682743140181902, 0.31321880817191083, 0.26370170850400976, 0.21954456375704956, 0.18052595557186568, 0.1463884009552707, 0.11684512748472065, 0.09158655924227181, 0.07028636820172199, 0.05260696600280677, 0.038204334142732534, 0.0267321159358644, 0.017844920422033797, 0.01120081599355582, 0.006463019096730197, 0.003300810186892429, 0.0013897344431033143, 0.00041116788952626785, 5.1349896987867045e-05, 3.9601812469466526e-32, ]


a_s_theo = [np.array([a_x_theo[i], 0, a_z_theo[i]]) for i in range(len(a_x_theo))]
a_global_theo = [np.array([a_global_x_t[i], 0, a_global_z_t[i]]) for i in range(len(a_x_theo))]

theta0_theo = 0.15

g_ref = 9.8
interv = 0.01
g_arr = np.array([0, 0, -1])
x_arr = np.array([1, 0, 0])
theta0_1 = 0.1
theta0_2 = 0.2
theta0_3 = 0.3
radius = 0.6


def step(a_s_raw, a_s, v_s, thetas, g_vect, axis, errors, qqq, v_qqq, pos_qqq, theta_qqq, a_qqq, radius_s, a_s_axis, theta0):
    a_s_axis.append(quat_rotate(qqq, a_s_raw[-1]))
    cos_th = np.cos(thetas[-1]/2)
    sin_th = np.sin(thetas[-1]/2)
    q = quaternion(cos_th, *(axis * sin_th))
    a_s.append((quat_rotate(q, -a_s_raw[-1]) + g_vect))

    cos_th_qqq = np.cos(theta_qqq[-1]/2)
    sin_th_qqq = np.sin(theta_qqq[-1]/2)
    #q_qqq = quaternion(cos_th_qqq, *(axis * sin_th_qqq))
    q_qqq = quaternion(cos_th_qqq, 0, -sin_th_qqq, 0)
    a_qqq.append(quat_rotate(q_qqq, -a_s_axis[-1]) + g_arr*g_ref)
    v_qqq.append(v_qqq[-1] + interv * a_qqq[-1])
    pos_qqq.append(pos_qqq[-1] + interv * v_qqq[-1])
    theta_qqq_0 = np.arctan2(pos_qqq[-1][2], pos_qqq[-1][0])
    theta_qqq.append(theta_qqq_0 + np.pi/2 - theta0)
    radius_s.append(sqrt(pos_qqq[-1][0]**2 + pos_qqq[-1][2]**2))
    
    v_in_init = v_s[-1] + a_s[-1]*interv
    theta_p = (theta0 + thetas[-1]) / 2
    cos_p = np.cos(theta_p)
    sin_p = np.sin(theta_p)
    q_p = quaternion(cos_p, *(axis * sin_p))
    perp_in_init = np.cross(axis, quat_rotate(q_p, g_vect))
    perp_in_init /= sqrt(np.dot(perp_in_init, perp_in_init))
    perp = np.dot(v_in_init, perp_in_init)
    v_s.append(perp_in_init * perp)
    v_err = v_in_init - v_s[-1]
    errors.append(np.dot(v_err, v_err))
    thetas.append(thetas[-1] + perp * interv / radius)
    
    

def quat_rotate(quat, vect):
    v_q = quaternion(0, *vect)
    res_q = quat * v_q * quat.conjugate()
    return np.array([res_q.x, res_q.y, res_q.z])
    

'''def integr(v0, v1, v_prev):
    return v_prev + (v0 + v1) * interv / 2'''

def quat1(vals):
    cos2theta = np.dot(vals, g_arr) 
    theta = np.arccos(cos2theta) / 2
    axis = np.cross(vals, g_arr)
    axis /= (np.sum(axis**2))**0.5
    return quaternion(np.cos(theta), np.sin(theta) * axis[0], np.sin(theta) * axis[1], np.sin(theta) * axis[2])

def quat2(vals, lat):
    vals = np.array(vals)
    vals /= (np.sum(vals**2))**0.5
    q1 = quat1(vals)
    lat_local = quat_rotate(q1, lat)
    cos2theta = np.dot(lat_local, x_arr)
    theta = np.arccos(cos2theta) / 2
    axis = np.cross(lat_local, x_arr)
    axis /= (np.sum(axis**2))**0.5
    q2 = quaternion(np.cos(theta), np.sin(theta) * axis[0], np.sin(theta) * axis[1], np.sin(theta) * axis[2])
    return q2 * q1

'''vals_ex = np.array([-0.923076923076923, 0.371390676354104, 0.0999897974799508])
lat_ex = np.array([0.230769230769231, 0.742781352708208, -0.628507298445407])
q_ex = quat2(vals_ex, lat_ex)
x_ex = np.array([3/13, 4/13, 12/13])
y_ex = np.array([4/sqrt(29), 3/sqrt(29), -2/sqrt(29)])
z_ex = np.array([-44/13/sqrt(29), 54/13/sqrt(29), -7/13/sqrt(29)])
print("x", x_ex, quat_rotate(q_ex, np.array([1,0,0])))
print("y", y_ex, quat_rotate(q_ex, np.array([0,1,0])))
print("z", z_ex, quat_rotate(q_ex, np.array([0,0,1])))
print("must be [0 0 -1]", quat_rotate(q_ex, vals_ex))
print("must be [1 0 0]", quat_rotate(q_ex, lat_ex))
# print(quat_rotate(q_ex, z_ex))
print("+++++++++")
qq = quat1(vals_ex)
print(quat_rotate(qq, vals_ex))
print(vals_ex, quat_rotate(qq.conjugate(), g_arr))'''
    
    

def calc_g(vals):
    return (sum([val**2 for val in vals]))**0.5
def calc_a1(vals):
    return np.arctan2(vals[1], vals[0])
def calc_a2(vals):
    return np.arctan2(vals[2], (vals[1]**2 + vals[0]**2)**0.5)

ii = 0
iis = []
vect2 = []
fns = [fn for fn in os.listdir('D:\\gestures_zidian') if "data1_" in fn]
def so(fn):
    return int(fn[6:].split(".")[0])
fns.sort(key=so)
vect3 = []
vect4 = []
vect_f = []
vect_g = []
vect_h = []
vect_x = []
vect_y = []
vect_z = []
vectx2 = []
vecty2 = []
vectz2 = []
vectxy = []
vectxz = []
vectyz = []
i = 0
vect = []
for fn in fns:
    #print(fn)
    ii = (ii + 1) % 2 
    with open(fn, "r") as f:
        ff = f.readlines()
        ll_len = len(ff)
        for line in ff:
            i += 1
            vals = [float(v) for v in line.split()]
            assert len(vals) == 3
            vect2.append(calc_g(vals))
            vect3.append(calc_a1(vals))
            vect4.append(calc_a2(vals))
            iis.append(ii+9)
            if 180 <= i <= 220:
                vect.append(calc_g(vals))
                vect_f.append(vals[0])
                vect_g.append(vals[1])
                vect_h.append(vals[2])
            if fn == "data1_1.txt":
                vectx2.append(vals[0]**2)
                vecty2.append(vals[1]**2)
                vectz2.append(vals[2]**2)
                vectxy.append(vals[0]*vals[1])
                vectxz.append(vals[0]*vals[2])
                vectyz.append(vals[1]*vals[2])
                vect_x.append(vals[0])
                vect_y.append(vals[1])
                vect_z.append(vals[2])
                
print(sum(vect)/len(vect))
f = sum(vect_f)/len(vect)
g = sum(vect_g)/len(vect)
h = sum(vect_h)/len(vect)
g_local = np.array([f, g, h])
x2 = sum(vectx2)               
y2 = sum(vecty2)                
z2 = sum(vectz2)                
xy = sum(vectxy)                
xz = sum(vectxz)                
yz = sum(vectyz)

x_mean = sum(vect_x)/len(vect_x)
y_mean = sum(vect_y)/len(vect_y)
z_mean = sum(vect_z)/len(vect_z)
mean = np.array([x_mean, y_mean, z_mean])

b = (f**3*y2/2 - f**3*z2/2 - f**2*g*xy + f**2*h*xz + f*g**2*x2/2 - f*g**2*z2/2 - f*h**2*x2/2 + f*h**2*y2/2 - f*sqrt(f**4*y2**2 - 2*f**4*y2*z2 + 4*f**4*yz**2 + f**4*z2**2 - 4*f**3*g*xy*y2 + 4*f**3*g*xy*z2 - 8*f**3*g*xz*yz - 8*f**3*h*xy*yz + 4*f**3*h*xz*y2 - 4*f**3*h*xz*z2 + 2*f**2*g**2*x2*y2 - 2*f**2*g**2*x2*z2 + 4*f**2*g**2*xy**2 + 4*f**2*g**2*xz**2 - 2*f**2*g**2*y2*z2 + 4*f**2*g**2*yz**2 + 2*f**2*g**2*z2**2 + 8*f**2*g*h*x2*yz - 4*f**2*g*h*y2*yz - 4*f**2*g*h*yz*z2 - 2*f**2*h**2*x2*y2 + 2*f**2*h**2*x2*z2 + 4*f**2*h**2*xy**2 + 4*f**2*h**2*xz**2 + 2*f**2*h**2*y2**2 - 2*f**2*h**2*y2*z2 + 4*f**2*h**2*yz**2 - 4*f*g**3*x2*xy + 4*f*g**3*xy*z2 - 8*f*g**3*xz*yz - 4*f*g**2*h*x2*xz + 8*f*g**2*h*xz*y2 - 4*f*g**2*h*xz*z2 - 4*f*g*h**2*x2*xy - 4*f*g*h**2*xy*y2 + 8*f*g*h**2*xy*z2 - 4*f*h**3*x2*xz - 8*f*h**3*xy*yz + 4*f*h**3*xz*y2 + g**4*x2**2 - 2*g**4*x2*z2 + 4*g**4*xz**2 + g**4*z2**2 + 4*g**3*h*x2*yz - 8*g**3*h*xy*xz - 4*g**3*h*yz*z2 + 2*g**2*h**2*x2**2 - 2*g**2*h**2*x2*y2 - 2*g**2*h**2*x2*z2 + 4*g**2*h**2*xy**2 + 4*g**2*h**2*xz**2 + 2*g**2*h**2*y2*z2 + 4*g**2*h**2*yz**2 + 4*g*h**3*x2*yz - 8*g*h**3*xy*xz - 4*g*h**3*y2*yz + h**4*x2**2 - 2*h**4*x2*y2 + 4*h**4*xy**2 + h**4*y2**2)/2 + g**2*h*xz - g*h**2*xy)/(f**3*yz - f**2*g*xz - f**2*h*xy + f*g**2*yz + f*g*h*x2 - f*g*h*y2 - g**3*xz + g**2*h*xy)
c = 1
a = -(b*g + h)/f

k1 = (b*h - g*c)/(g*a - b*f)
k2 = (c*f - h*a)/(g*a - b*f)
z_1 = 1 / sqrt(k1**2 + k2**2 + 1)
lat_1 = np.array([k1*z_1, k2*z_1, z_1])
lat_2 = -lat_1
lat = lat_1 if np.dot(lat_1, mean) > 0 else lat_2

# mean1 = mean - g_local * (np.dot(g_local, mean)/np.dot(g_local, g_local))
# print("dot", np.dot(lat_1/sqrt(np.dot(lat_1, lat_1)), mean1/sqrt(np.dot(mean1, mean1))))
# print("cross", np.cross(lat_1/sqrt(np.dot(lat_1, lat_1)), mean1/sqrt(np.dot(mean1, mean1))))
# lat = -mean1 / sqrt(np.dot(mean1, mean1))

qqq = quat2(g_local, lat)

axis = np.cross(g_local, lat)
axis /= sqrt(np.dot(axis, axis))
# print("qqq axis", quat_rotate(qqq, axis))

i = 0

a_s_raw = []
a_s = []
v_s = [np.array([0,0,0])]
thetas = [0]
errors = []
i_s = []
a_s_axis = []

v_qqq_1 = [np.array([0,0,0])]
pos_qqq_1 = [radius*np.array([np.sin(theta0_1), 0, -np.cos(theta0_1)])]
theta_qqq_1 = [0]
a_qqq_1 = [np.array([0,0,0])]
radius_s_1 = [radius]
v_qqq_2 = [np.array([0,0,0])]
pos_qqq_2 = [radius*np.array([np.sin(theta0_2), 0, -np.cos(theta0_2)])]
theta_qqq_2 = [0]
a_qqq_2 = [np.array([0,0,0])]
radius_s_2 = [radius]
v_qqq_3 = [np.array([0,0,0])]
pos_qqq_3 = [radius*np.array([np.sin(theta0_3), 0, -np.cos(theta0_3)])]
theta_qqq_3 = [0]
a_qqq_3 = [np.array([0,0,0])]
radius_s_3 = [radius]

'''for fn in fns: 
    with open(fn, "r") as f:
        ff = f.readlines()
        ll_len = len(ff)
        for line in ff:
            i += 1
            vals = [float(v) for v in line.split()]
            assert len(vals) == 3
            if fn == "data1_1.txt":
                i_s.append(i)
                a_s_raw.append(np.array(vals))
                step(a_s_raw, a_s, v_s, thetas, g_local, axis, errors, qqq, v_qqq_1, pos_qqq_1, theta_qqq_1, a_qqq_1, radius_s_1, a_s_axis, theta0_1)
                step(a_s_raw, a_s, v_s, thetas, g_local, axis, errors, qqq, v_qqq_2, pos_qqq_2, theta_qqq_2, a_qqq_2, radius_s_2, a_s_axis, theta0_2)
                step(a_s_raw, a_s, v_s, thetas, g_local, axis, errors, qqq, v_qqq_3, pos_qqq_3, theta_qqq_3, a_qqq_3, radius_s_3, a_s_axis, theta0_3)
i_s.append(i_s[-1] + 1)'''

def step_theo(a_theo, v_qqq, pos_qqq, theta_qqq, a_qqq, radius_s, a_s_axis, theta0):
    a_s_axis.append(a_theo)

    cos_th_qqq = np.cos(theta_qqq[-1]/2)
    sin_th_qqq = np.sin(theta_qqq[-1]/2)
    q_qqq = quaternion(cos_th_qqq, 0, -sin_th_qqq, 0)
    a_qqq.append(quat_rotate(q_qqq, -a_s_axis[-1]) + g_arr*g_ref)
    v_qqq.append(v_qqq[-1] + interv * a_qqq[-1])
    pos_qqq.append(pos_qqq[-1] + interv * v_qqq[-1])
    theta_qqq_0 = np.arctan2(pos_qqq[-1][2], pos_qqq[-1][0])
    theta_qqq.append(theta_qqq_0 + np.pi/2 - theta0)
    radius_s.append(sqrt(pos_qqq[-1][0]**2 + pos_qqq[-1][2]**2))

i = 1
i_s_theo = [0]
v_theo = [np.array([0,0,0])]
pos_theo = [radius*np.array([np.sin(theta0_theo), 0, -np.cos(theta0_theo)])]
theta_theo = [0]
a_abs_theo = [np.array([0,0,0])]
radius_s_theo = [radius]
a_s_axis_theo = []
for a in a_s_theo:
    step_theo(a_s_theo[i_s_theo[-1]], v_theo, pos_theo, theta_theo, a_abs_theo, radius_s_theo, a_s_axis_theo, theta0_theo)
    i_s_theo.append(i)
    i += 1


#errors.append(errors[-1])


# q_base = quat2(g_local, lat)
                
                

x = np.arange(len(vect2))
y = np.array(vect2)
y3 = np.array(vect3)
y4 = np.array(vect4)
y2 = np.array(iis)
fig, ax = plt.subplots()
#ax.plot(x, y)
#ax.plot(x, y2)
#ax.plot(x, y3)
#ax.plot(x, y4)
i_s = np.array(i_s)
a_s_axis = np.array(a_s_axis)
'''thetas = np.array(thetas)
ax.plot(i_s, thetas)'''
'''a_qqq = np.array(a_qqq)
ax.plot(i_s, a_qqq[:,0])
ax.plot(i_s, a_qqq[:,1])
ax.plot(i_s, a_qqq[:,2])
ax.plot(i_s, theta_qqq)'''
'''ax.plot(i_s, errors)
ax.plot(i_s, radius_s)'''
'''ax.plot(i_s, a_s_axis[:,0])
ax.plot(i_s, a_s_axis[:,1])
ax.plot(i_s, a_s_axis[:,2])'''
'''ax.plot(i_s, theta_qqq_1)
ax.plot(i_s, theta_qqq_2)
ax.plot(i_s, theta_qqq_3)'''
ax.plot(i_s_theo, theta_theo)
ax.plot(i_s_theo, radius_s_theo)
ax.plot(list(range(len(theta_t))), theta_t)
ax.legend(["theta", "radius", "theor_theta"])
plt.show()
